



	•	Read First: 	
	⁃	HOW TO USE PROGRAM 
	⁃	Use sliders first to choose desired colour
	⁃	Click button of what you wish to change AFTER sliders 
	⁃	eg background, or a specific shape
	⁃	draw shape/ change background
	⁃	Whenever sliders are used to change colour, reselect button that you wish to use 
	⁃	Press and hold drag - but drag SLOWLY for it to work

	•	Basics:
	⁃	Name: Laurel Tay
	⁃	School Email: Ltay3@u.rochester.edu
	⁃	Blackboard Username: Ltay3
	⁃	Date of Submission: April 4th
	⁃	Assignment Number: HW5

	•	Self-Review:
	⁃	Overall, the program works as expected and without any significant bugs. 
	⁃	The code is easy to read and understand, and the user interface is intuitive and user-friendly.
	⁃	Small bugs:
	⁃	Drag needs to be slow to work well
	⁃	The program does not show the current color selected by the user, which can be confusing if the user forgets which color they have chosen.
	⁃	
	•	MetaData:
	⁃	I estimate that I spent around 12 hours on this assignment, including testing and debugging. 
	⁃	The most challenging part of the assignment was getting the mouse listener to work properly, as it required me to understand how the mouse events work in Java. 
	⁃	I also had to spend some time debugging the program to make sure that the shapes were being drawn correctly and that the sliders were updating the colors correctly.


	•	Code Explanation
	⁃	The program has sliders that the user can move to adjust the RGB values of the color of the shape being drawn.
	⁃	The main class of the program is called "DrawingProgram," which extends the JFrame class. This class sets up the GUI and initializes all the components, including the canvas, buttons, and sliders. The canvas is defined as a JPanel object, which is added to the main JFrame object.
	⁃	The class also defines several private fields to keep track of the current state of the program, such as the current drawing mode (circle or square), the current shape being drawn, and the list of all shapes drawn so far.
	⁃	The program uses several listeners to respond to user actions. For example, it uses the MouseListener and MouseMotionListener interfaces to handle mouse clicks and movements on the canvas. It also uses the ChangeListener interface to handle changes to the RGB sliders.
	⁃	The code makes use of several Java data structures to manage the shapes being drawn. For example, the list of all shapes is stored as an ArrayList, which allows for efficient insertion and retrieval of shapes. The program also uses a Hashtable to map the values of the RGB sliders to their corresponding labels.







